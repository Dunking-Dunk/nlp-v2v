// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                   String              @id @default(uuid())
    email                String              @unique
    password             String
    name                 String?
    isAdmin              Boolean             @default(false)
    isVerified           Boolean             @default(false)
    resetPasswordToken   String?
    resetPasswordExpires DateTime?
    createdAt            DateTime            @default(now())
    updatedAt            DateTime            @updatedAt
    verificationTokens   VerificationToken[]
}

// Separate model for verification tokens with expiration
model VerificationToken {
    id        String   @id @default(uuid())
    token     String   @unique
    expires   DateTime
    createdAt DateTime @default(now())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Interview {
    id        String          @id @default(uuid())
    startTime DateTime        @default(now())
    endTime   DateTime?
    status    InterviewStatus @default(ACTIVE)

    candidateId String?
    candidate   Candidate? @relation(fields: [candidateId], references: [id])

    position     String?
    department   String?
    level        String? @default("ENTRY")
    description  String?
    feedback     String? @db.Text
    overallScore Int?    @default(0) // 0-100 scale

    // Detailed evaluation scores
    technicalSkillScore      Int? @default(0) // 0-100 scale
    problemSolvingScore      Int? @default(0) // 0-100 scale
    communicationScore       Int? @default(0) // 0-100 scale
    attitudeScore            Int? @default(0) // 0-100 scale
    experienceRelevanceScore Int? @default(0) // 0-100 scale

    // Detailed evaluation notes
    strengthsNotes        String? @db.Text
    improvementAreasNotes String? @db.Text
    technicalFeedback     String? @db.Text
    culturalFitNotes      String? @db.Text
    recommendationNotes   String? @db.Text

    transcriptEntries InterviewTranscript[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model InterviewTranscript {
    id          String      @id @default(uuid())
    interviewId String
    interview   Interview   @relation(fields: [interviewId], references: [id])
    timestamp   DateTime    @default(now())
    speakerType SpeakerType
    content     String      @db.Text
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model Candidate {
    id         String      @id @default(uuid())
    email      String?     @unique
    phone      String?     @unique
    name       String?
    resume     String?     @db.Text
    experience String?
    skills     String?     @db.Text
    education  String?     @db.Text
    interviews Interview[]
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
}

// Enums
enum InterviewStatus {
    ACTIVE
    COMPLETED
    CANCELLED
    PENDING_REVIEW
}

enum JobLevel {
    ENTRY
    MID
    SENIOR
    LEAD
    MANAGER
    EXECUTIVE
}

enum DepartmentType {
    ENGINEERING
    PRODUCT
    DESIGN
    MARKETING
    SALES
    SUPPORT
    HR
    FINANCE
    OPERATIONS
}

// Speaker types for transcript entries
enum SpeakerType {
    AGENT
    CANDIDATE
    SYSTEM
}
